#include <chrono>
#include <cmath>
#include <iostream>
#include <numbers>
#include <string>
#include <vector>

using std::chrono::duration;
using std::chrono::duration_cast;
using std::chrono::high_resolution_clock;
using std::chrono::milliseconds;

std::vector<double> data = {
    4.23763887e-01, 6.98266402e-01, 8.39393357e-01, 1.11181796e-01,
    3.90739319e-01, 3.74839252e-01, 8.73796781e-01, 5.04973376e-01,
    6.97167716e-01, 8.42303507e-01, 5.85475346e-01, 9.40705119e-01,
    6.36247350e-01, 3.73815015e-01, 7.39459960e-01, 7.07388400e-01,
    4.38761115e-01, 1.81619002e-01, 2.96586736e-01, 2.84459896e-01,
    7.29230946e-01, 8.52822168e-01, 8.67299861e-02, 7.34647349e-01,
    2.77222845e-03, 9.07795331e-01, 1.72537871e-01, 6.91162853e-01,
    2.22988355e-01, 3.80135324e-01, 2.88532493e-01, 6.81471921e-01,
    4.07806194e-01, 2.49481017e-01, 7.86689952e-01, 7.68993841e-01,
    2.14806993e-01, 4.88239792e-01, 8.51828249e-01, 4.48297999e-01,
    1.50797494e-01, 3.45559811e-01, 5.81065501e-01, 2.72172035e-01,
    2.29757516e-01, 5.31523120e-01, 6.80888417e-01, 7.23456032e-01,
    2.36291092e-01, 6.35811895e-02, 4.31852841e-01, 1.26415386e-01,
    2.41860671e-01, 2.65553037e-01, 8.74465326e-01, 9.72811397e-01,
    3.15062553e-02, 8.63798341e-01, 3.99939709e-01, 2.11515241e-01,
    3.77695128e-01, 9.74819388e-01, 4.83850392e-01, 4.72970250e-01,
    8.20320217e-01, 1.45528077e-01, 4.87188796e-01, 5.39648439e-01,
    4.33627085e-01, 3.59585214e-01, 4.05845466e-01, 7.72624612e-01,
    2.67708614e-01, 4.97085499e-01, 8.11827817e-02, 4.28632554e-02,
    8.63839432e-01, 7.84074954e-01, 3.06467242e-01, 3.50954039e-01,
    7.98857108e-01, 9.33742804e-01, 7.53470788e-01, 9.86091030e-01,
    2.65579570e-01, 2.19126994e-01, 2.63165845e-01, 4.40524954e-01,
    3.37219685e-01, 9.31528954e-01, 9.89357266e-01, 4.01948400e-01,
    1.52499421e-01, 7.10582980e-01, 5.32755492e-01, 8.60459509e-01,
    4.06466211e-01, 6.63047887e-02, 7.69620116e-01, 4.79568175e-01,
    8.27263076e-01, 9.00412036e-01, 6.12084576e-01, 1.47124737e-01,
    8.26265778e-01, 2.56068710e-01, 5.02155313e-01, 6.42281597e-01,
    8.44334224e-01, 7.86146474e-01, 7.99439144e-01, 1.18898450e-01,
    4.07169186e-01, 3.78806421e-01, 4.14521395e-01, 1.24701144e-02,
    6.46702947e-01, 7.89724967e-01, 9.27199073e-01, 9.86966509e-01,
    7.17687021e-01, 1.71463002e-01, 3.71145441e-02, 5.59459795e-01,
    4.23979232e-01, 1.98252863e-01, 3.04161147e-01, 8.83542918e-01,
    1.51464691e-01, 3.35132066e-03, 2.62608653e-01, 4.19086548e-02,
    6.48079221e-01, 1.98485037e-01, 7.28121307e-01, 6.27850309e-01,
    2.04470728e-01, 3.98379974e-01, 3.16856278e-01, 2.49706372e-01,
    1.17979841e-01, 1.98770274e-01, 1.67789364e-02, 4.81328757e-01,
    4.61468149e-01, 6.29124922e-02, 8.87994403e-01, 4.10644740e-01,
    8.79416006e-01, 9.60515288e-02, 1.82046881e-01, 7.80343816e-01,
    3.13299140e-01, 4.41222168e-01, 2.37233584e-02, 7.31399417e-01,
    4.32201290e-01, 9.80086370e-01, 5.20585702e-02, 8.08398658e-01,
    1.05935505e-01, 4.01615898e-02, 6.97584536e-02, 9.06784964e-01,
    9.84215599e-01, 5.12196072e-02, 4.17713399e-01, 3.11088601e-01,
    7.41175650e-01, 9.93479051e-01, 5.05626945e-01, 7.12176958e-01,
    3.03710202e-01, 8.45146293e-01, 8.66242268e-01, 4.44128878e-01,
    1.16786970e-02, 5.67833683e-01, 5.19459525e-01, 2.80517548e-01,
    8.28395233e-01, 9.97381979e-01, 3.72146574e-01, 6.15908015e-01,
    2.39546856e-01, 6.88571016e-01, 9.63047791e-01, 6.71104515e-02,
    7.50080526e-01, 1.98862248e-01, 2.13843320e-01, 5.19884685e-01,
    4.20715703e-01, 7.51553238e-02, 5.61251806e-01, 2.04027849e-01,
    3.35404912e-01, 4.54222522e-01, 4.63306519e-01, 9.89797473e-01,
    1.58468677e-01, 3.14267216e-01, 8.92593236e-01, 6.45767617e-02,
    1.74051294e-01, 2.96912810e-01, 8.89631860e-01, 4.81783136e-01,
    1.14583542e-01, 4.64355660e-01, 3.50856293e-02, 4.00789755e-01,
    5.69609032e-03, 3.89017854e-02, 9.28882819e-01, 5.84937017e-01,
    1.37680085e-02, 2.14391256e-02, 5.54239739e-01, 4.86818117e-01,
    5.92609068e-01, 6.30410044e-01, 7.74685459e-01, 4.18644508e-01,
    3.04204222e-01, 1.37124695e-01, 8.50488748e-01, 4.93225225e-01,
    4.40588050e-01, 1.23321704e-01, 8.86477792e-01, 9.71478431e-01,
    3.17003627e-01, 4.80511148e-01, 1.23540796e-01, 7.53004658e-01,
    4.22797677e-01, 4.30844655e-01, 6.21474181e-01, 9.78820576e-01,
    5.52430649e-01, 2.04545112e-01, 7.87810939e-01, 3.08807341e-01,
    6.86763177e-01, 7.47891191e-01, 5.43979717e-02, 9.49274522e-01,
    3.43140108e-01, 5.66132307e-01, 7.67062117e-01, 1.20449780e-02,
    3.25592686e-02, 8.96185335e-01, 8.12858543e-01, 5.66910738e-01,
    8.17297827e-01, 1.70013064e-01, 2.75436163e-01, 4.23375108e-01,
    4.01638359e-01, 9.97218213e-03, 1.17983674e-01, 6.44468316e-01,
    7.31918444e-01, 8.75656776e-01, 9.09488553e-01, 9.22246718e-01,
    8.71222285e-01, 8.10616079e-01, 5.62038150e-01, 4.42625313e-01,
    4.08637786e-01, 2.48848433e-01, 5.83338892e-01, 5.38386210e-01,
    3.99187501e-01, 9.61014070e-01, 5.44750186e-01, 4.58619342e-01,
    2.74505466e-01, 4.98805461e-01, 3.59041238e-01, 9.69518998e-01,
    6.81109045e-01, 4.50184051e-01, 6.29066272e-01, 3.44352645e-01,
    3.57340795e-01, 8.13118585e-01, 6.18869661e-01, 4.47158283e-01,
    3.34726627e-01, 4.94954799e-01, 4.39446790e-01, 7.08104687e-01,
    4.56235691e-01, 3.12535896e-01, 9.66409680e-02, 8.48941476e-01,
    3.74341824e-01, 8.07745290e-01, 5.22194785e-01, 8.17090825e-02,
    5.12512316e-01, 5.56505459e-01, 6.89842156e-01, 6.31610179e-01,
    1.62574245e-01, 2.97541707e-01, 2.75275838e-01, 5.24389413e-01,
    5.43915241e-01, 6.81413764e-01, 9.83994896e-02, 8.50363933e-01,
    2.87616518e-01, 6.79832896e-01, 4.55532271e-01, 6.83370006e-01,
    4.63604676e-01, 5.23536880e-01, 1.76895377e-01, 7.56952592e-01,
    9.87433644e-01, 1.64377675e-01, 3.06357999e-01, 8.16350231e-01,
    7.09617849e-01, 7.01417674e-01, 4.51596670e-01, 7.37054288e-01,
    7.94715663e-01, 8.42192909e-01, 8.27237335e-01, 7.95462951e-02,
    6.63553099e-01, 8.22538955e-01, 1.64431946e-01, 4.35900233e-02,
    7.88343986e-02, 5.43428286e-01, 9.07318117e-01, 5.20431913e-01,
    5.07512370e-01, 2.73057066e-01, 5.83799813e-01, 7.06556794e-01,
    1.03493867e-02, 8.30621335e-01, 1.57017167e-01, 9.34553586e-01,
    9.12463727e-01, 8.77205047e-01, 6.39582564e-01, 6.53153487e-01,
    6.04883150e-01, 8.22519559e-01, 3.70236576e-01, 5.38767339e-01,
    4.47953691e-01, 5.11354005e-01, 7.43991537e-01, 8.30547418e-01,
    2.08097026e-01, 7.37704125e-01, 6.85074488e-01, 5.14927630e-01,
    8.42372791e-01, 4.59329597e-01, 3.05675051e-01, 8.83247289e-01,
    3.05718356e-01, 2.09223384e-01, 7.29833835e-01, 1.55168455e-01,
    9.04203513e-01, 1.47207415e-01, 4.10371775e-01, 4.34964781e-01,
    7.97195708e-02, 6.39372419e-01, 2.85271405e-01, 2.55372598e-01,
    5.89154015e-01, 5.04979721e-01, 3.83765137e-02, 4.24049789e-01,
    4.54255471e-01, 1.71785349e-01, 2.17704533e-01, 3.54777261e-01,
    4.00621797e-01, 9.65674424e-01, 3.90504901e-01, 9.56857279e-01,
    8.12706821e-01, 9.54763996e-02, 6.18530295e-01, 8.86016837e-01,
    7.84289178e-01, 5.14900774e-01, 6.90273243e-01, 7.99458180e-01,
    3.12417252e-01, 1.37449488e-01, 7.97245598e-01, 7.86795146e-01,
    3.99453554e-01, 7.95547336e-01, 8.56530021e-02, 5.66754909e-02,
    6.23930314e-02, 1.77207325e-01, 7.92872217e-02, 9.45551991e-01,
    1.74404432e-01, 3.38306247e-01, 5.86209789e-01, 9.75624599e-01,
    6.75840382e-01, 7.13278344e-01, 8.71187876e-01, 4.13080114e-01,
    2.29525042e-01, 1.65748427e-01, 6.67698022e-01, 7.34433592e-01,
    3.90361840e-01, 9.24324762e-01, 7.38485481e-01, 8.92875369e-01,
    5.59828771e-01, 6.97075930e-02, 4.11728218e-02, 3.72525709e-01,
    2.95482119e-01, 2.62548959e-01, 4.85208032e-01, 5.80736852e-01,
    3.30369799e-01, 1.93523017e-01, 6.21104134e-01, 7.26615039e-01,
    5.27070710e-01, 2.33808582e-01, 6.25862914e-01, 9.62894423e-03,
    8.04911896e-01, 2.08670109e-01, 4.66599658e-01, 8.54709484e-01,
    8.33557972e-01, 7.73720725e-01, 1.49901810e-01, 7.49548773e-01,
    4.11026506e-01, 7.26517882e-01, 3.79370604e-01, 8.99563603e-01,
    5.64046219e-01, 4.24122091e-01, 9.29408831e-01, 4.88675417e-01,
    2.61430643e-01, 7.45596933e-01, 1.41775493e-01, 1.18675241e-02,
    4.11961964e-02, 4.48300144e-04, 2.66531667e-01, 1.30123642e-01,
    5.40768763e-01, 1.85603038e-01, 2.85755538e-01, 9.72629521e-01,
    3.38048549e-01, 8.62530687e-01, 2.50959708e-01, 1.32912033e-01,
    3.10855075e-01, 1.95137612e-01, 3.19864647e-01, 5.01146403e-02,
    4.77127440e-01, 5.80222671e-01, 6.68490742e-02, 9.26643944e-01,
    7.24278331e-01, 4.27901023e-01, 1.87467947e-01, 5.79553916e-01,
    2.73013379e-01, 3.66139432e-01, 9.54037638e-01, 4.11891472e-01,
    6.00805461e-01, 1.39131759e-01, 4.72468860e-01, 3.71095017e-01,
    2.80138953e-01, 2.50826804e-01, 6.84066352e-01, 5.61331023e-01,
    1.76350711e-01, 1.18001234e-02, 8.69448592e-01, 9.36383489e-01,
    4.40746844e-01, 7.49299825e-02, 8.51847978e-01, 4.24382080e-01,
    7.67869671e-01, 3.87839675e-01, 1.43557059e-01, 1.65526993e-01,
    7.11293439e-01, 4.46040027e-01, 9.28548173e-01, 6.47923998e-01,
    6.64353321e-01, 5.11024257e-02, 5.49460355e-03, 1.59868876e-01,
    1.68481933e-01, 7.22793755e-01, 7.73485176e-01, 8.68336476e-01,
    4.27201657e-01, 2.67093021e-01, 3.53496483e-01, 9.30081195e-01,
    8.91360554e-01, 3.01357930e-01, 3.55678133e-01, 8.92092230e-01,
    3.26936277e-01, 3.89486804e-01, 4.20810420e-01, 8.72526711e-02,
    5.92033570e-01, 5.05445365e-01, 3.42583605e-01, 7.76375563e-01,
    5.19913377e-01, 9.48510084e-01, 7.68429828e-01, 8.93914981e-01,
    4.42383241e-02, 9.73834448e-01, 8.18163985e-01, 2.73574019e-01,
    5.17617358e-01, 5.99434978e-01, 4.03348391e-01, 3.75340110e-01,
    9.10168864e-01, 9.38156376e-01, 9.66634074e-02, 6.60289655e-01,
    8.79767519e-01, 7.01923763e-01, 9.18214750e-01, 2.87132878e-01,
    9.59464130e-01, 8.47299523e-01, 5.21144204e-01, 1.67241451e-01,
    5.65369921e-01, 3.93144769e-01, 9.43468092e-02, 1.15246297e-01,
    3.97612858e-01, 5.45060689e-01, 1.57731931e-01, 6.30039981e-01,
    5.81241706e-01, 6.22025511e-01, 6.53735116e-01, 8.29766079e-01,
    5.55486966e-01, 9.88902637e-01, 3.87249380e-02, 3.32568255e-01,
    7.05620321e-01, 1.00078861e-01, 7.38101190e-01, 2.54691851e-01,
    2.53330023e-01, 6.73493037e-01, 2.33866359e-01, 2.25099876e-03,
    9.05523347e-01, 5.92873385e-01, 5.69745221e-01, 7.70454447e-01,
    5.97782939e-01, 1.66612144e-01, 5.63348135e-01, 4.49490763e-01,
    5.25393525e-01, 8.55781085e-01, 4.31925497e-01, 3.16818433e-01,
    2.27132833e-01, 1.91909200e-01, 9.80051417e-01, 5.04616920e-01,
    4.63946653e-01, 5.54593728e-02, 4.25500631e-01, 3.24696063e-01,
    9.23899765e-01, 7.12428967e-01, 9.40228276e-01, 1.94180641e-01,
    8.92446962e-02, 9.64234073e-01, 8.84342480e-01, 5.71765469e-01,
    5.16769668e-01, 1.16873983e-01, 5.06278708e-01, 3.92502743e-01,
    3.14766007e-01, 5.33092563e-01, 3.14213181e-01, 3.63068753e-01,
    4.85067592e-01, 1.14407148e-01, 4.81113669e-01, 2.03733001e-02,
    7.42173420e-01, 3.28351064e-01, 9.79464321e-02, 5.68678384e-01,
    7.64151371e-01, 1.60274906e-01, 1.72787785e-01, 4.22485838e-01,
    3.96132053e-02, 4.39529188e-01, 9.43865559e-01, 8.91282162e-01,
    6.70428180e-01, 6.08534603e-01, 3.67973900e-01, 3.16173214e-01,
    7.53047198e-01, 6.69268074e-01, 7.42319139e-01, 3.91744062e-01,
    8.38587905e-01, 3.78744755e-01, 3.00283413e-01, 1.76306857e-01,
    1.35808233e-01, 2.38374922e-01, 2.17654442e-01, 1.08431211e-01,
    2.53128238e-01, 3.81295099e-01, 6.34621678e-01, 1.32874036e-01,
    1.98017924e-01, 6.90479516e-01, 5.41785856e-01, 6.16484567e-01,
    3.52807765e-01, 6.67339868e-01, 7.85063763e-01, 8.48129358e-02,
    4.63592982e-01, 7.63697232e-01, 8.33699206e-01, 3.95463238e-02,
    7.31930390e-01, 2.07855082e-01, 3.41866354e-01, 1.93044460e-01,
    1.88532342e-02, 7.34642378e-01, 9.27732174e-01, 7.32621429e-01,
    5.04922187e-02, 5.80290905e-01, 5.60649341e-01, 8.98484359e-02,
    3.75878650e-01, 4.67961446e-01, 2.14417287e-01, 6.27610802e-02,
    9.95586563e-01, 2.12237175e-01, 8.05920697e-01, 3.80706664e-01,
    7.83525759e-01, 7.39987671e-01, 8.31233152e-01, 9.40725752e-01,
    5.14907914e-01, 1.77424451e-01, 8.39854761e-01, 4.19394443e-01,
    6.13757399e-01, 6.99121319e-01, 6.40387943e-01, 7.09210487e-01,
    1.58148264e-02, 8.40990996e-01, 3.38272305e-01, 2.43333649e-01,
    8.02361135e-01, 8.29800517e-01, 2.51363772e-01, 6.67897226e-01,
    6.09621814e-01, 1.99246801e-01, 4.17595901e-01, 6.92322346e-01,
    7.68557969e-01, 4.11263099e-01, 7.47740529e-01, 2.87078157e-02,
    1.19513297e-02, 8.45626721e-01, 8.39901622e-01, 3.94873515e-01,
    7.89065022e-01, 6.01984957e-01, 4.92281525e-01, 6.49402086e-01,
    3.83017964e-01, 5.12794201e-01, 1.58622347e-01, 7.37204777e-01,
    1.08502431e-01, 7.58661834e-01, 9.96120309e-01, 3.47520883e-01,
    4.76324404e-01, 3.81302043e-01, 1.23134706e-01, 6.50176499e-02,
    6.08492220e-01, 7.00837084e-01, 2.96036512e-01, 5.45920208e-01,
    5.82355779e-01, 9.89029023e-01, 3.40845514e-02, 7.44991775e-01,
    4.43764933e-01, 5.27405283e-01, 7.73437329e-01, 5.33927867e-02,
    5.92734237e-01, 8.09693619e-01, 9.76794990e-01, 3.09403497e-01,
    1.99371798e-01, 2.84408350e-01, 5.24186716e-01, 5.68223777e-01,
    4.61659118e-01, 1.44753947e-01, 4.53795699e-01, 4.10429482e-02,
    2.21507896e-01, 2.25970212e-02, 2.49567206e-01, 7.65146011e-01,
    2.37926497e-02, 8.01543209e-01, 5.47576314e-01, 9.07979712e-01,
    2.85044740e-01, 7.75193900e-01, 8.32804993e-01, 1.52100160e-01,
    6.85210517e-01, 8.02513503e-01, 1.53222082e-01, 2.76753071e-01,
    1.83901882e-01, 1.77694243e-02, 5.24030887e-01, 8.77950619e-01,
    1.62643546e-01, 1.54137027e-02, 6.89767616e-01, 1.66415417e-01,
    5.86496704e-01, 7.45484937e-01, 5.29220038e-01, 5.48403349e-01,
    6.87430129e-01, 6.42840042e-01, 7.28467296e-02, 2.99589648e-01,
    1.69019123e-01, 8.38093256e-02, 5.40453480e-01, 2.21873342e-02,
    3.79172115e-01, 8.75305527e-01, 5.40345772e-01, 2.45612406e-01,
    5.84010889e-01, 6.86017748e-01, 7.21974870e-01, 7.96823308e-01,
    3.90121296e-01, 2.41315759e-01, 8.05385830e-01, 6.09269748e-01,
    5.73635403e-01, 7.19567717e-01, 7.08170715e-01, 9.35107646e-01,
    7.00111080e-01, 7.27315350e-01, 9.93996564e-01, 3.07867853e-01,
    1.97180535e-01, 6.22431981e-01, 9.88467823e-01, 5.08721706e-01,
    6.16556706e-01, 7.54229957e-01, 4.42537120e-01, 6.64757810e-01,
    2.26091887e-01, 9.63701951e-01, 9.03263145e-02, 4.42972470e-01,
    5.55010608e-02, 9.05337875e-01, 3.50323522e-01, 6.09472706e-01,
    3.56400725e-01, 4.25958630e-01, 4.04026327e-01, 6.35209674e-01,
    3.26172867e-01, 2.50195578e-01, 2.96296476e-01, 4.03376907e-01,
    8.66518739e-01, 7.45781389e-01, 5.39927082e-01, 1.12271152e-01,
    8.22419730e-01, 2.06779976e-01, 5.47365322e-02, 7.83443653e-01,
    1.91976622e-01, 9.02246873e-01, 8.68398686e-01, 3.23255829e-02,
    6.56434216e-01, 4.04425035e-01, 7.70512441e-01, 9.87595403e-02,
    4.89682862e-01, 3.92776339e-01, 7.23251990e-01, 3.35578809e-01,
    8.89987310e-01, 1.73764636e-01, 8.51264643e-01, 8.58469104e-01,
    6.05052719e-01, 4.70112190e-01, 1.92248115e-01, 9.83785200e-01,
    2.59758624e-01, 9.86903789e-01, 5.94213680e-01, 6.25602274e-01,
    2.27024134e-01, 7.62768471e-01, 4.96517499e-02, 1.67674037e-01,
    3.77904209e-01, 2.11677156e-01, 6.58084541e-01, 9.20024243e-01,
    1.70202120e-01, 6.08650550e-01, 3.12035313e-01, 2.39350821e-01,
    8.06487142e-01, 4.12547845e-01, 9.75338561e-01, 8.43044052e-01,
    2.81174748e-01, 3.07078355e-01, 9.81942657e-01, 9.00195719e-01,
    1.81775888e-01, 7.85126910e-03, 9.49212210e-01, 8.68048274e-01,
    2.77920122e-01, 6.86396322e-01, 2.90631964e-01, 5.00155128e-01,
    9.80682427e-01, 9.09764075e-01, 7.72447011e-01, 8.08600340e-02,
    7.03240830e-01, 2.51832703e-01, 1.76000717e-01, 7.10266166e-01,
    2.49207635e-01, 9.12763281e-01, 4.20853818e-01, 6.98152760e-01,
    9.85908529e-01, 1.56809842e-02, 5.83816761e-01, 8.10539473e-01,
    8.56515636e-01, 4.25768615e-01, 8.69828867e-01, 4.58937925e-01,
    7.18983422e-01, 2.50313518e-01, 4.60872137e-01, 1.89347958e-01,
    5.59725754e-01, 1.01731673e-01, 4.40004668e-01, 8.89298804e-01,
    6.77863847e-01, 8.41587791e-01, 5.85730660e-01, 5.44159526e-01,
    2.39399590e-01, 8.92211049e-01, 5.93751291e-01, 7.55780165e-01,
    1.81960668e-01, 6.23294574e-01, 8.99840322e-01, 2.92526577e-01,
    8.77475907e-01, 6.38126347e-01, 8.73865351e-02, 9.48910257e-02,
    5.78069868e-01, 4.65172117e-01, 4.86496791e-02, 9.94715526e-01,
    2.06756016e-01, 6.32135920e-01, 7.02628082e-01, 3.53600851e-01,
    4.94529520e-01, 8.26654424e-01, 3.26180440e-02, 9.12180207e-01,
    3.66837266e-02, 4.25236993e-01, 6.33397374e-01, 7.04454132e-02,
    3.36259497e-01, 5.52842046e-01, 1.09536026e-01, 1.21640075e-01,
    5.64208538e-01, 7.96724704e-01, 5.64526176e-01, 5.70832488e-01,
    8.33834214e-01, 9.02230798e-01, 6.52734514e-01, 6.40923788e-01,
    7.21529106e-01, 4.47157023e-01, 2.39389278e-01, 3.28148489e-01,
    2.01963760e-01, 1.85417988e-01, 9.04442862e-01, 2.68343188e-01,
    2.40668801e-01, 7.05652178e-01, 5.09269821e-01, 8.73990773e-01,
    4.29389822e-01, 7.25902171e-01, 2.04320211e-01, 8.45122167e-01,
    7.44649964e-01, 2.45059185e-01, 5.92183854e-01, 8.76027295e-01};

double __attribute__((noinline)) nop(double x) { return 0.00001; }

double __attribute__((noinline)) fastlog2(double x) {
  // Handle the easy parts.
  if (!std::isnormal(x) || x > 64 || x < 1 / 64.) {
    return log(x);
  }

  double shift = 0;

  // Shift up small values.
  while (x <= 1) {
    x *= 2;
    shift += 1;
  }

  // Shift down large values.
  while (x > 2) {
    x /= 2;
    shift -= 1;
  }

  // Use a 4-part polynom to approximate log2(x);
  double c[] = {0.15365779, -1.02798723, 3.0079672, -2.1322138};
  double log2 = 0.6931471805599453;

  // Use Horner's method to evaluate the polynomial.
  double val = c[3] + x * (c[2] + x * (c[1] + x * (c[0])));

  // Compute log2(x), and convert the result to base-e.
  return log2 * (val - shift);
}

// Find the max error.
void validate_error(double max_range = 20.0, int iterations = 10000) {
  double max_error = 0;
  double error_val = 0;
  unsigned validated = 0;
  // Validate a sequence of numbers.
  for (int i = 0; i < iterations; i++) {
    validated++;
    double val = ((max_range * i) / iterations);
    double err = std::abs(log(val) - fastlog2(val));
    if (err > max_error) {
      error_val = val;
      max_error = err;
    }
  }

  // Validate the pre-computed random numbers.
  for (auto elem : data) {
    validated++;
    double val = (elem * max_range);
    double err = std::abs(log(val) - fastlog2(val));
    if (err > max_error) {
      error_val = val;
      max_error = err;
    }
  }

  std::cout << "Tested " << validated << " values [0.." << max_range << "]\n";
  std::cout << "Max error " << max_error << " at " << error_val << "\n";
  std::cout << "# " << log(error_val) << " vs " << fastlog2(error_val) << "\n";
}

// Check if the function is monolithic.
void validate_monotonic(double max_range = 20.0, int iterations = 10000) {
  double prev = fastlog2(0);
  unsigned non_monotonic = 0;
  for (int i = 1; i < iterations; i++) {
    double val = ((max_range * i) / iterations);
    val = fastlog2(val);
    if (prev > val) {
      non_monotonic += 1;
    }
    prev = val;
  }

  std::cout << "Tested " << iterations << " values [0.." << max_range << "]\n";
  std::cout << "Found " << non_monotonic << " non-monotinic values\n";
}

void bench(const std::string &name, double (*handle)(double), double range = 8.,
           int iterations = 1000000) {
  auto t1 = high_resolution_clock::now();

  double sum = 0;
  for (int iter = 0; iter < iterations; iter++) {
    for (auto elem : data) {
      sum += handle(elem * 4);
    }
  }

  auto t2 = high_resolution_clock::now();
  auto ms_int = duration_cast<milliseconds>(t2 - t1);
  std::cout << "name = " << name << ", ";
  std::cout << "sum = " << sum << ", ";
  std::cout << "time = " << ms_int.count() << "ms\n";
}

int main(int argc, char **argv) {

  bench("fast_log", fastlog2, 64.0);
  bench("stdlib", log, 64.0);
  bench("nop", nop, 64.0);

  validate_error();
  validate_monotonic();
  return 0;
}
